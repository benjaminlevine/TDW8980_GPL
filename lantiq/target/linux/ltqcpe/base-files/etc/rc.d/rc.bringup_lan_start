#!/bin/sh
# 000001:tc.chen 2005/06/07 add 802.1p and ip ptos support. rewrite all of the qos scirpts
#509143:linmars remove unnecessary script
#060906:sharontseng add to support Atheros driver into bridge mode.

echo "Env $ENVLOADED" > /dev/null
if [ ! "$ENVLOADED" ]; then
	if [ -r /etc/rc.conf ]; then
		 . /etc/rc.conf 2> /dev/null
		ENVLOADED="1"
	fi
fi

if [ ! "$CONFIGLOADED" ]; then
	if [ -r /etc/rc.d/config.sh ]; then
		. /etc/rc.d/config.sh 2>/dev/null
		CONFIGLOADED="1"
	fi
fi

platform=${CONFIG_IFX_MODEL_NAME%%_*}
if [ "$platform" = "DANUBE" -o "$platform" = "AMAZON" -o "$platform" = "TP-VE" -o "$platform" = "GW188" ]; then
	target=$platform
else
	target=`echo $platform | cut -c -4`
fi

	
#if [ -r /etc/rc.d/model_config.sh ]; then
#	. /etc/rc.d/model_config.sh 2>/dev/null
#fi

#start(){
#509143:linmars
#	if  [ "$CONFIG_FEATURE_VLAN" = "1" ]; then
#		/etc/rc.d/init.d/vlan start
#	fi

	echo "UTC0" > /etc/TZ
if [ -n "$CONFIG_TARGET_LTQCPE_PLATFORM_AR9_VB" ]; then
	# store board mac address
	/usr/sbin/status_oper SET dev_info mac_addr "`/usr/sbin/upgrade mac_get 0`"
	[ `mount|grep -q nfs;echo $?` -eq  0 ] || ifconfig eth1 down
	[ `mount|grep -q nfs;echo $?` -eq  0 ] || ifconfig eth1 hw ether `/usr/sbin/upgrade mac_get 0`
	[ `mount|grep -q nfs;echo $?` -eq  0 ] || ifconfig eth1 0.0.0.0 up
else
        # store board mac address
        /usr/sbin/status_oper SET dev_info mac_addr "`/usr/sbin/upgrade	mac_get 0`"
        [ `mount|grep -q nfs;echo $?` -eq  0 ] || ifconfig eth0 down
        [ `mount|grep -q nfs;echo $?` -eq  0 ] || ifconfig eth0	hw ether `/usr/sbin/upgrade mac_get 0`
        [ `mount|grep -q nfs;echo $?` -eq  0 ] || ifconfig eth0 0.0.0.0 up

fi
   # setup wireless
#	if  [ "$CONFIG_FEATURE_IFX_WIRELESS" = "1" ]; then
#	#	/etc/rc.d/rc.bringup_wlan load
#		/etc/rc.d/rc.bringup_wlan start
#		echo .
#	fi

	eval g_wan_phy_mode='$'wanphy_phymode
	eval g_wan_tc_mode='$'wanphy_tc
	
	if [ "$g_wan_phy_mode" = "0" -a "$g_wan_tc_mode" = "0" ]; then # ADSL and ATM
		startFlag=1
	elif [ "$g_wan_phy_mode" = "0" -o "$g_wan_phy_mode" = "3" ]; then # ADSL/VDSL and PTM
		if [ "$g_wan_tc_mode" = "1" ]; then # ADSL/VDSL and PTM
			startFlag=1
		fi
	elif [ "$g_wan_phy_mode" = "2" ]; then # Eth on MII1
		startFlag=1
	fi
	
	if [ -n "$startFlag" -a "$startFlag" = "1" ]; then
		if [ "$STP_Bridge_ENABLE" = "1" ]; then
			/usr/sbin/brctl stp br0 on
		else
			/usr/sbin/brctl stp br0 off
		fi
	fi

	LAN_VLAN_ID=2
	if [ "$g_wan_phy_mode" = "1" -a "$CONFIG_IFX_CONFIG_CPU" != "XRX288" ]; then # Eth on MII1
		eth_vlan_cfg="1"
	elif [ "$g_wan_phy_mode" = "2" -a "$CONFIG_IFX_CONFIG_CPU" = "XRX288" ]; then
		vr9_eth_vlan_cfg="1"
	fi

	if [ "$g_wan_phy_mode" = "0" -a "$target" = "VRX" ]; then
	    switch_utility MAC_TableEntryAdd 0 6 0 1 00:00:00:00:00:00
	fi

	# This is work around added for gw188 Mii1 mode. Needs to be removed later
	if [ "$g_wan_phy_mode" = "2" -a "$CONFIG_IFX_CONFIG_CPU" = "AMAZON_S" ]; then
	#	switch_utility_int MDIO_DataWrite 0x11 0x0 0x1200
		mem -s 0x1e1080cc -uw 0x12000620
	fi

	if [ -n "$vr9_eth_vlan_cfg" -a "$vr9_eth_vlan_cfg" = "1" ]; then
		#    switch_utility RegisterSet 0xCCD 0x20;
		#    LAN_PORT="1 2 3 4"
                
		switch_utility RegisterSet 0xCCD 0x20;
		LAN_PORT="0 1 2 4 7 8"
                LAN1_VLAN_ID=500 
                CPU1_VLAN_ID=501

		#Set global switch parameter
		switch_utility CfgSet 3 1 1536 0 00:00:00:00:00:00
		#Create VLAN ID (LAN)
		switch_utility VLAN_IdCreate $LAN1_VLAN_ID 0
		#Create VLAN ID (CPU)
		switch_utility VLAN_IdCreate $CPU1_VLAN_ID 0 

		for lan in $LAN_PORT; do
			switch_utility VLAN_PortCfgSet $lan $LAN1_VLAN_ID 0 0 3 0 1
		done

		for cpu in 6; do
			switch_utility VLAN_PortCfgSet $cpu $CPU1_VLAN_ID 0 0 3 0 1
		done

		#LAN VLAN membership
		# - 40: VLAN ID
		# - argument: Port ID
		# - 0: Tag base Number Egress disabled
		for argument in $LAN_PORT 6;do
			switch_utility VLAN_PortMemberAdd $LAN1_VLAN_ID $argument 0
		done

		#CPU VLAN membership
		# - 50: VLAN ID
		# - 0,1,2,3,6: Port ID
		# - 0: Tag base Number Egress disabled
		for argument in $LAN_PORT 6 ;do
			switch_utility VLAN_PortMemberAdd $CPU1_VLAN_ID $argument 0
		done

		elif [ -n "$eth_vlan_cfg" -a "$eth_vlan_cfg" = "1" ]; then

		# make switch VLAN aware
  		/usr/bin/switch_utility CfgSet 3 1 1536 0 00:00:00:00:00:00

		# create VLAN with id LAN_VLAN_ID
		/usr/bin/switch_utility VLAN_IdCreate ${LAN_VLAN_ID} 1
	
		# make ports 0,1,2 (fast eth ports on Tantos) and 6 (CPU port) as its members
		/usr/bin/switch_utility VLAN_PortCfgSet 0 ${LAN_VLAN_ID} 1 1 2 0 0
	  	/usr/bin/switch_utility VLAN_PortCfgSet 1 ${LAN_VLAN_ID} 1 1 2 0 0
	  	/usr/bin/switch_utility VLAN_PortCfgSet 2 ${LAN_VLAN_ID} 1 1 2 0 0
	  	/usr/bin/switch_utility VLAN_PortCfgSet 6 ${LAN_VLAN_ID} 1 1 2 0 0
		if [ -n "$CONFIG_TARGET_LTQCPE_PLATFORM_DANUBE" -a "$CONFIG_TARGET_LTQCPE_PLATFORM_DANUBE" = "1" ]; then
	  		/usr/bin/switch_utility VLAN_PortCfgSet 3 ${LAN_VLAN_ID} 1 1 2 0 0
		fi
	
		/usr/bin/switch_utility VLAN_PortMemberAdd ${LAN_VLAN_ID} 0 0
		/usr/bin/switch_utility VLAN_PortMemberAdd ${LAN_VLAN_ID} 1 0
		/usr/bin/switch_utility VLAN_PortMemberAdd ${LAN_VLAN_ID} 2 0
		if [ -n "$CONFIG_TARGET_LTQCPE_PLATFORM_DANUBE" -a "$CONFIG_TARGET_LTQCPE_PLATFORM_DANUBE" = "1" ]; then
			/usr/bin/switch_utility VLAN_PortMemberAdd ${LAN_VLAN_ID} 3 0
		fi
		/usr/bin/switch_utility VLAN_PortMemberAdd ${LAN_VLAN_ID} 6 1

		# Configure the LAN IP Address
		/sbin/vconfig add eth0 $LAN_VLAN_ID
		/sbin/ifconfig eth0.$LAN_VLAN_ID 0.0.0.0 up
		# configure rules for lan side device access
		# /usr/sbin/naptcfg --ADDLAN ${1}.$LAN_VLAN_ID
		# Temporary hack : use iptables command instead of naptcfg. To enhance naptcfg with new option ADDLANIF
		/usr/sbin/iptables -t nat -I IFX_NAPT_PREROUTING_LAN -i eth0 -j ACCEPT
	
		brctl delif br0 eth0
		brctl addif br0 eth0.$LAN_VLAN_ID

		fi
	if [ -n "$CONFIG_TARGET_LTQCPE_PLATFORM_AR9_VB" ]; then
		#VB LAN initialization
		 eval ip='$'gbc_mgmtIP
		 eval netmask='$'gbc_mgmtNetMask
		 /sbin/ifconfig br0 $ip netmask $netmask up
		 /usr/sbin/brctl stp br0 on
		 if [ "$ipv6_status" = "1" ]; then #bootup run ipv6 related stuff
			 ./etc/rc.d/rc.bringup_lan v6start
		 fi
	else
		i=0
		while [ $i -lt $lan_main_Count ]
		do
			eval addr_type='$'lan_main_${i}_ipAddrType
			if [ "$addr_type" = "2" ]; then
				eval ip='$'lan_main_${i}_ipAddr
				eval netmask='$'lan_main_${i}_netmask
				eval iface='$'lan_main_${i}_interface
				/sbin/ifconfig $iface $ip netmask $netmask up
				/usr/sbin/status_oper SET Lan1_IF_Info STATUS "UP" IP "$ip" MASK "$netmask"
                        	if [ "$ipv6_status" = "1" ]; then #bootup run ipv6 related stuff
                                	. /etc/rc.d/rc.bringup_lan v6start
                        	fi
			elif [ -f /etc/rc.d/udhcpc_lan.script -a "$addr_type" = "1" ]; then
				. /etc/rc.d/init.d/udhcpc lan_start 0
			fi
			i=$(( $i + 1 ))
		done
	fi

	# Setup Static Route
	. /etc/rc.d/rc.bringup_staticRoutes

	if [ -f /usr/sbin/naptcfg ]; then
		i=0
		while [ $i -lt $lan_main_Count ]
		do
			eval iface='$'lan_main_${i}_interface
			/usr/sbin/naptcfg --ADDLAN $iface
	 		/usr/sbin/naptcfg --Servicesinit
			i=$(( $i + 1 ))
		done

	fi

	# Start DHCP Server
	if  [ "$CONFIG_FEATURE_DHCP_SERVER" = "1" ]; then
		i=0
		while [ $i -lt $lan_main_Count ]
		do
			eval dhcp_mode='$'lan_main_${i}_dhcpMode
			eval dhcp_enable='$'lan_dhcps_dhcpMode
			if [ "$dhcp_mode" = "server" -o  "$dhcp_mode" = "relay" -a "$dhcp_enable" = "1" ]; then
				#echo "configuring dhcpd !!"
				# Fix: SMS00449773
				#if [ -f /etc/udhcpd.conf ]; then
				/etc/rc.d/init.d/udhcpd start > /dev/null
				#fi
			fi
			i=$(( $i + 1 ))
		done
	fi

	#i=0
	#while [ $i -lt $lan_main_Count ]
	#do
	#	eval dhcp_mode='$'lan_main_${i}_dhcpMode
	#	if [ "$dhcp_mode" = "relay" ]; then
	#		eval relay_ip='$'lan_dhcp_relay_server
	#		eval relay_iface='$'lan_dhcp_relay_serverIf
	#		eval lan_iface='$'lan_main_${i}_interface
	#		echo "configuring dhcp relay !!"
	#		if [ -z $relay_iface ]; then
	#			eval def_iface='$'default_wan_conn_iface
	#			/sbin/udhcpr -i $lan_iface -s $relay_ip:$def_iface > /dev/null & 
	#		else
	#			/sbin/udhcpr -i $lan_iface -s $relay_ip:$relay_iface > /dev/null & 
	#		fi
	#	fi
	#	i=$(( $i + 1 ))
	#done


#if  [ "1$CONFIG_FEATURE_IFX_MULTICASE_UPGRADE" = "1" ]; then
#805291:<IFTW-Henry>:Add 
#eval upgrading_ip='$'lan_main_0_ipAddr
#killall -9 multicase_upgrade 2>/dev/null
#sleep 1
#multicase_upgrade $upgrading_ip &
#fi
	# PPA 
  if [ "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_A5_BUILTIN" = "11" -o "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_A5_MOD" = "11" -o "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_D5_BUILTIN" = "11" -o "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_D5_MOD" = "11" -o "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_A4_BUILTIN" = "11" -o "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_A4_MOD" = "11" -o "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_D4_BUILTIN" = "11" -o "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_D4_MOD" = "11" -o "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_E5_BUILTIN" = "11" -o "1$CONFIG_PACKAGE_KMOD_LTQCPE_PPA_E5_MOD" = "11" ]; then
		. /etc/rc.d/get_lan_if
		/etc/rc.d/ppa_config.sh addlan $LAN_IFNAME

		if [ "$g_wan_phy_mode" = "1" ]; then # Eth on MII0
			# FIXME: eth0.2 will be removed and lan intf will be derived dynamically from rc.conf 
			/etc/rc.d/ppa_config.sh addlan eth0.2
		else
			if [ -n "$CONFIG_TARGET_LTQCPE_PLATFORM_AR9_VB" ]; then
	                        /etc/rc.d/ppa_config.sh addlan eth1
			else
				/etc/rc.d/ppa_config.sh addlan eth0
			fi
		fi
	fi

# Re-Start Media Server if enabled and running.
if [ "$ms_0_ena" = "1" ]; then
	if [ -f /var/run/minidlna.pid ]; then
		/etc/rc.d/S*minidlna restart && >&- || >&-
	fi
fi

